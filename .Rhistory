})
setGeneric(name = "ExistLocus",
def = function(start,list_locus){standardGeneric("ExistLocus" )}
)
setMethod(f="ExistLocus",
signature = "character",
definition = function(start,list_locus){
result <- FALSE
for (i in 1:length(list_locus)){
if(list_locus[i] == start){
result <- TRUE
}
}
return(typeof(result))
}
)
test <- read.table("./test/text.txt")
install.packages("rPython")
test <- 1:3
test
test <- list(1:3)
test
test <- list(1,2,3)
test
> bubba <- list(first="one", second="two", third="third")
> class(bubba) <- append(class(bubba),"Flamboyancy")
bubba <- list(first="one", second="two", third="third")
class(bubba) <- append(class(bubba),"Flamboyancy")
class
bubba
test <- append(test, "lol")
test
NordAmericain <- function(eatsBreakfast=TRUE,myFavorite="cereal"){
{
## Get the environment for this
## instance of the function.
thisEnv <- environment()
hasBreakfast <- eatsBreakfast
favoriteBreakfast <- myFavorite
## Create the list used to represent an
## object for this class
me <- list(
## Define the environment where this list is defined so
## that I can refer to it later.
thisEnv = thisEnv,
## The Methods for this class normally go here but are discussed
## below. A simple placeholder is here to give you a teaser....
getEnv = function()
{
return(get("thisEnv",thisEnv))
}
)
## Define the value of the list within the current environment.
assign('this',me,envir=thisEnv)
## Set the name for the class
class(me) <- append(class(me),"NordAmericain")
return(me)
}
bubba <- NordAmericain()
bubba
bubba
NordAmericain <- function(eatsBreakfast=TRUE,myFavorite="cereal"){
{
## Get the environment for this
## instance of the function.
thisEnv <- environment()
hasBreakfast <- eatsBreakfast
favoriteBreakfast <- myFavorite
## Create the list used to represent an
## object for this class
me <- list(
## Define the environment where this list is defined so
## that I can refer to it later.
thisEnv = thisEnv,
## The Methods for this class normally go here but are discussed
## below. A simple placeholder is here to give you a teaser....
getEnv = function()
{
return(get("thisEnv",thisEnv))
}
)
## Define the value of the list within the current environment.
assign('this',me,envir=thisEnv)
## Set the name for the class
class(me) <- append(class(me),"NordAmericain")
return(me)
}
}
bubba <- NordAmericain()
bubba
Locus <- function (start , end){
class(me) <- list(start, end)
return (me)
}
}
Locus <- function (start , end){
class(me) <- list(start, end)
return (me)
}
TEST <- Locus(1,2)
Locus <- function (start , end){
me <- list(start, end)
class(me) <- me
return (me)
}
TEST <- Locus(1,2)
TEST
bubba
x <- Gene()
getwd()
x <- new("Gene")
setClass(
#name of the class
"Gene",
#attributes of the class
slots = list(uniquename = "factor", msU7name = "factor", fgeneshName = "factor", rappredname = "factor", fmin = "numeric", fmax = "numeric",contig = "factor",iricname = "factor", strand = "factor", description = "character")
)
x <- Gene()
x <- new("Gene")
getClass(x)
y <- new("Locus")
setClass(
#name of the class
"Locus",
#attributes of the class
representation = representation(start = "numeric", end = "numeric", genes = "vector", chromosome = "numeric")
)
y <- new("Locus")
getClass(Class = "Locus")
getClass(y)
Locus <- setClass(
#name of the class
"Locus",
#attributes of the class
representation = representation(start = "numeric", end = "numeric", genes = "vector", chromosome = "numeric")
)
a <- Locus(start = 2)
a
Locus <- function (start , end){
me <- list(start, end)
if(start < 0) {
stop("ça marche pas ça mon con")
}
class(me) <- me
return (me)
}
a <- Locus(start = -1)
a <- Locus(start = -1, end = 2)
a <- Locus(start = 1, end = 2)
a@start
a$start
a
Locus1 <- setClass(
#name of the class
"Locus",
#attributes of the class
representation = representation(start = "numeric", end = "numeric")
)
Locus2 <- setClass(
#name of the class
"Locus",
#attributes of the class
representation = representation(chromosome = "numeric"),
contains = "Locus1"
)
Locus1 <- setClass(
#name of the class
"Locus1",
#attributes of the class
representation = representation(start = "numeric", end = "numeric")
)
Locus2 <- setClass(
#name of the class
"Locus2",
#attributes of the class
representation = representation(chromosome = "numeric"),
contains = "Locus1"
)
Locus2(start = 1, end = 2, chromosome = 3)
Locus1 <- function(start1, end1){
return (new("Locus1", start = start1, end = end1))
}
Locus1(start = 1, end = 2)
setClass("pere",
slots = list(surname = "pere"),
)
setClass("fils",
slots = list(name = "fils"),
contains = "pere"
)
setGeneric(name = "setsurname",
def = function(start){standardGeneric("setsurname" )}
)
setMethod(name = "setsurname",
signature = "pere",
def = function(pere){
return (pere@surname)
}
)
setGeneric(name = "setsurname",
def = function(pere){standardGeneric("setsurname" )}
)
setMethod("setsurname",
signature = "pere",
def = function(pere){
return (pere@surname)
}
)
fils <- setClass("fils",
slots = list(name = "fils"),
contains = "pere"
)
pere <- setClass("pere",
slots = list(surname = "pere"),
)
pere <- setClass("pere",
slots = list(surname = "character"),
)
fils <- setClass("fils",
slots = list(name = "character"),
contains = "pere"
)
setGeneric(name = "setsurname",
def = function(pere){standardGeneric("setsurname" )}
)
setMethod("setsurname",
signature = "pere",
def = function(pere){
return (pere@surname)
}
)
s <- fils(surname = "gallego", name = "julien")
s
setsurname(s)
setMethod("setsurname",
signature = "fils",
def = function(pere){
return (pere@name)
}
)
setsurname(s)
source('~/.active-rstudio-document', echo=TRUE)
setsurname(s,"robert")
s
setMethod("setsurname",
signature = "fils",
def = function(object, name){
object@name <- name
}
return object
)
setMethod("setsurname",
signature = "fils",
def = function(object, name){
object@name <- name
return object
}
)
setMethod("setsurname",
signature = "fils",
def = function(object, name){
object@name <- name,
return object
}
)
setMethod("setsurname",
signature = "fils",
def = function(object, name){
object@name <- name
return object
}
)
setMethod("setsurname",
signature = "fils",
def = function(object, name){
object@name <- name
return object
}
)
setMethod("setsurname",
signature = "fils",
def = function(object, name){
object@name <- name
return object
}
)
setMethod("setsurname",
signature = "fils",
def = function(object, name){
object@name <- name
return(object)
}
)
setsurname(s,"patrice")
s
e <- new.env()
e
e <- s
e
e <- s
e <- new.env()
e
e@a
e$a
e$b
e$z
e$aa
e$aaaaaaaaaaa
e$e
e$12
e$a <- 1
e$n<-2
ls(e)
ls()
str(e)
exist(x,envir=e)
where(s)
where("s")
s
library(pryr)
install.packages("pryr")
library(pryr)
where("s")
where("a")
where("e")
where("e$a")
ls(e)
e$a
where("mean")
parent.frame()
indentical(globalenv,e)
`environment<-`(e)
environment(e)
where(a)
environment(get)
where(x)
where(s)
search()
environment(new.env())
e$f <- function(x) x
e$f(3)
environment(f)
environment(e$f)
test <- e$a
test
a
e$a
e$a <- 3
test
test <- 5
e$a
locator()
e <- new.env(parent=globalenv())
where(e)
ls(e)
e$e <- 2
ls(e)
where("e")
setGeneric(name = "givenameoffather",
def = function(object, name){standardGeneric("givenameoffather" )}
)
setMethod("givenameoffather",
signature = c("fils","pere"),
def = function(fils,pere){
fils@surname=pere@surname
}
)
setGeneric(name = "givenameoffather",
def = function(fils, pere){standardGeneric("givenameoffather" )}
)
setMethod("givenameoffather",
signature = c("fils","pere"),
def = function(fils,pere){
fils@surname=pere@surname
}
)
p <- pere("patrick")
pere <- setClass("pere",
slots = list(surname = "character"),
)
fils <- setClass("fils",
slots = list(name = "character"),
contains = "pere"
)
p <- pere("patrick")
p <- pere(surname = "patrick")
p
s
givenameoffather(fils = "s", pere = "p")
givenameoffather(fils = s, pere = p)
s
setMethod("givenameoffather",
signature = c("fils","pere"),
def = function(fils,pere){
fils@surname=pere@surname
return(fils)
}
)
givenameoffather(fils = s, pere = p)
s
setMethod("givenameoffather",
signature = c("fils"),
def = function(fils,pere){
fils@surname=pere@surname
return(fils)
}
)
givenameoffather(fils = s, pere = p)
setMethod("givenameoffather",
signature = c("fils"),
def = function(fils,pere){
change <- fils@surname
fils@surname = pere@surname
pere@surname = change
return(fils)
}
)
givenameoffather(fils = s, pere = p)
setMethod("givenameoffather",
signature = c("fils"),
def = function(fils,pere){
change <- fils@surname
fils@surname = pere@surname
pere@surname = change
return(c(fils,pere))
}
)
setMethod("givenameoffather",
signature = c("fils"),
def = function(fils,pere){
change <- fils@surname
fils@surname = pere@surname
pere@surname = change
return(c(fils,pere))
}
)
givenameoffather(fils = s, pere = p)
setMethod("givenameoffather",
signature = c("fils"),
def = function(fils,pere){
change <- fils@surname
fils@surname = pere@surname
pere@surname = change
return(c(fils,pere))
}
)
setMethod("givenameoffather",
signature = c("fils"),
def = function(fils,pere){
change <- fils@surname
fils@surname <- pere@surname
pere@surname <- change
return(c(fils,pere))
}
)
givenameoffather(fils = s, pere = p)
setMethod("givenameoffather",
signature = c("fils"),
def = function(fils,pere){
change <- fils@surname
fils@surname <- pere@surname
pere@surname <- change
result <- c(fils,pere)
return(result)
}
)
givenameoffather(fils = s, pere = p)
s <- new(Class = "fils", surname = "moi", name = "toi")
call <- function(database){
if(database == 1){
csv <- read.csv("./test/outputRAPDB.csv")    genes <- vector(mode='list', length=nrow(csv))
for ( i in 1:nrow(csv) ) {
genes[i] <- new ("Gene2", uniquename = csv[[1]][[i]], msU7name = csv[[9]][[i]], fgeneshName = csv[[4]][[i]], rappredname = csv[[5]][[i]], fmin = csv[[6]][[i]], fmax = csv[[2]][[i]],contig = csv[[7]][[i]],iricname = csv[[8]][[i]], strand = csv[[10]][[i]], description = as.character(csv[[11]][[i]]))
}
return(genes)
}
}
call <- function(database){
if(database == 1){
csv <- read.csv("./test/outputRAPDB.csv")
genes <- vector(mode='list', length=nrow(csv))
for ( i in 1:nrow(csv) ) {
genes[i] <- new ("Gene2", uniquename = csv[[1]][[i]], msU7name = csv[[9]][[i]], fgeneshName = csv[[4]][[i]], rappredname = csv[[5]][[i]], fmin = csv[[6]][[i]], fmax = csv[[2]][[i]],contig = csv[[7]][[i]],iricname = csv[[8]][[i]], strand = csv[[10]][[i]], description = as.character(csv[[11]][[i]]))
}
return(genes)
}
}
call(1)
getwd()
install.packages(rPython)
install.packages("rPython")
installed.packages("system2")
installed.packages("sys)
}
s
zd
z^))
source('~/Polytech-IG4/InternshipHanoi/rRice/R/AllClasses.R', echo=TRUE)
source('~/Polytech-IG4/InternshipHanoi/rRice/R/AllClasses.R', echo=TRUE)
source('~/Polytech-IG4/InternshipHanoi/rRice/R/AllClasses.R', echo=TRUE)
cl <- setClass("test", representation(test1 = "character"))
cl("test")
new(Class = "test", test1 = "test")
test <- new(Class = "test", test1 = "test")
def = function(object, attribute, value){
object@attribute <- value
return(object)
}
def(object = test, attribute = "test1", value="aoauou")
test
setwd(dir = "./Polytech-IG4/InternshipHanoi/rRice/")
devtools::install(".")
