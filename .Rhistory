setMethod("setsurname",
signature = "fils",
def = function(pere){
return (pere@name)
}
)
setsurname(s)
source('~/.active-rstudio-document', echo=TRUE)
setsurname(s,"robert")
s
setMethod("setsurname",
signature = "fils",
def = function(object, name){
object@name <- name
}
return object
)
setMethod("setsurname",
signature = "fils",
def = function(object, name){
object@name <- name
return object
}
)
setMethod("setsurname",
signature = "fils",
def = function(object, name){
object@name <- name,
return object
}
)
setMethod("setsurname",
signature = "fils",
def = function(object, name){
object@name <- name
return object
}
)
setMethod("setsurname",
signature = "fils",
def = function(object, name){
object@name <- name
return object
}
)
setMethod("setsurname",
signature = "fils",
def = function(object, name){
object@name <- name
return object
}
)
setMethod("setsurname",
signature = "fils",
def = function(object, name){
object@name <- name
return(object)
}
)
setsurname(s,"patrice")
s
e <- new.env()
e
e <- s
e
e <- s
e <- new.env()
e
e@a
e$a
e$b
e$z
e$aa
e$aaaaaaaaaaa
e$e
e$12
e$a <- 1
e$n<-2
ls(e)
ls()
str(e)
exist(x,envir=e)
where(s)
where("s")
s
library(pryr)
install.packages("pryr")
library(pryr)
where("s")
where("a")
where("e")
where("e$a")
ls(e)
e$a
where("mean")
parent.frame()
indentical(globalenv,e)
`environment<-`(e)
environment(e)
where(a)
environment(get)
where(x)
where(s)
search()
environment(new.env())
e$f <- function(x) x
e$f(3)
environment(f)
environment(e$f)
test <- e$a
test
a
e$a
e$a <- 3
test
test <- 5
e$a
locator()
e <- new.env(parent=globalenv())
where(e)
ls(e)
e$e <- 2
ls(e)
where("e")
setGeneric(name = "givenameoffather",
def = function(object, name){standardGeneric("givenameoffather" )}
)
setMethod("givenameoffather",
signature = c("fils","pere"),
def = function(fils,pere){
fils@surname=pere@surname
}
)
setGeneric(name = "givenameoffather",
def = function(fils, pere){standardGeneric("givenameoffather" )}
)
setMethod("givenameoffather",
signature = c("fils","pere"),
def = function(fils,pere){
fils@surname=pere@surname
}
)
p <- pere("patrick")
pere <- setClass("pere",
slots = list(surname = "character"),
)
fils <- setClass("fils",
slots = list(name = "character"),
contains = "pere"
)
p <- pere("patrick")
p <- pere(surname = "patrick")
p
s
givenameoffather(fils = "s", pere = "p")
givenameoffather(fils = s, pere = p)
s
setMethod("givenameoffather",
signature = c("fils","pere"),
def = function(fils,pere){
fils@surname=pere@surname
return(fils)
}
)
givenameoffather(fils = s, pere = p)
s
setMethod("givenameoffather",
signature = c("fils"),
def = function(fils,pere){
fils@surname=pere@surname
return(fils)
}
)
givenameoffather(fils = s, pere = p)
setMethod("givenameoffather",
signature = c("fils"),
def = function(fils,pere){
change <- fils@surname
fils@surname = pere@surname
pere@surname = change
return(fils)
}
)
givenameoffather(fils = s, pere = p)
setMethod("givenameoffather",
signature = c("fils"),
def = function(fils,pere){
change <- fils@surname
fils@surname = pere@surname
pere@surname = change
return(c(fils,pere))
}
)
setMethod("givenameoffather",
signature = c("fils"),
def = function(fils,pere){
change <- fils@surname
fils@surname = pere@surname
pere@surname = change
return(c(fils,pere))
}
)
givenameoffather(fils = s, pere = p)
setMethod("givenameoffather",
signature = c("fils"),
def = function(fils,pere){
change <- fils@surname
fils@surname = pere@surname
pere@surname = change
return(c(fils,pere))
}
)
setMethod("givenameoffather",
signature = c("fils"),
def = function(fils,pere){
change <- fils@surname
fils@surname <- pere@surname
pere@surname <- change
return(c(fils,pere))
}
)
givenameoffather(fils = s, pere = p)
setMethod("givenameoffather",
signature = c("fils"),
def = function(fils,pere){
change <- fils@surname
fils@surname <- pere@surname
pere@surname <- change
result <- c(fils,pere)
return(result)
}
)
givenameoffather(fils = s, pere = p)
s <- new(Class = "fils", surname = "moi", name = "toi")
call <- function(database){
if(database == 1){
csv <- read.csv("./test/outputRAPDB.csv")    genes <- vector(mode='list', length=nrow(csv))
for ( i in 1:nrow(csv) ) {
genes[i] <- new ("Gene2", uniquename = csv[[1]][[i]], msU7name = csv[[9]][[i]], fgeneshName = csv[[4]][[i]], rappredname = csv[[5]][[i]], fmin = csv[[6]][[i]], fmax = csv[[2]][[i]],contig = csv[[7]][[i]],iricname = csv[[8]][[i]], strand = csv[[10]][[i]], description = as.character(csv[[11]][[i]]))
}
return(genes)
}
}
call <- function(database){
if(database == 1){
csv <- read.csv("./test/outputRAPDB.csv")
genes <- vector(mode='list', length=nrow(csv))
for ( i in 1:nrow(csv) ) {
genes[i] <- new ("Gene2", uniquename = csv[[1]][[i]], msU7name = csv[[9]][[i]], fgeneshName = csv[[4]][[i]], rappredname = csv[[5]][[i]], fmin = csv[[6]][[i]], fmax = csv[[2]][[i]],contig = csv[[7]][[i]],iricname = csv[[8]][[i]], strand = csv[[10]][[i]], description = as.character(csv[[11]][[i]]))
}
return(genes)
}
}
call(1)
getwd()
install.packages(rPython)
install.packages("rPython")
installed.packages("system2")
installed.packages("sys)
}
s
zd
z^))
source('~/Polytech-IG4/InternshipHanoi/rRice/R/AllClasses.R', echo=TRUE)
source('~/Polytech-IG4/InternshipHanoi/rRice/R/AllClasses.R', echo=TRUE)
source('~/Polytech-IG4/InternshipHanoi/rRice/R/AllClasses.R', echo=TRUE)
cl <- setClass("test", representation(test1 = "character"))
cl("test")
new(Class = "test", test1 = "test")
test <- new(Class = "test", test1 = "test")
def = function(object, attribute, value){
object@attribute <- value
return(object)
}
def(object = test, attribute = "test1", value="aoauou")
test
?shell
install.packages("vdgrsm")
install.packages("VdgRsm")
library(VdgRsm)
?VdgRsm
plan <- gen.USD(2)
plan
typeof(plan)
as.data.frame(plan)
typeof(plan)
install.packages("design")
unlist(plan)
test <- unlist(plan)
test
typeof(plan)
install.package("DoE.base")
install.packages("DoE.base")
library(DoE.base)
?add.response
design.info(plan)
plan2 <- data.frame()
design.info(plan2)
plan <- planor2design(plan)
?planor2design
?planordesign
plan <- planor2design(as.data.frame(plan))
?add.response
fac.design(2)
?fac.design
fac.design(2,7)
fac.design(a,b)
fac.design(2)
fac.design(2,2,a,b)
fac.design(2,2)
design
undesign(plan)
typeof(plan) <- design
class(plan) <- design
factorize.data.frame(plan)
library(DoE.base)
factorize.data.frame(plan)
?design
?desnum
data.frame(row.names = c("gene1"))
ex <- data.frame(row.names = c("gene1"))
ex
ex[[1]] <-
1
ex
ex[[3]] <- 3
ex
names(ex) <- c("id", "locus")
ex
test <- c(1,2)
test2 <- c(3,4)
testtest <- data.frame(test,test2)
purrr::map(testtest,
function(x){
print(x)
}
purrr::map(testtest,
function(x){
print(x)
}
)
purrr::map(testtest,
function(x){
print(x)
})
purrr::map(testtest,
function(x){
print("ok")
})
purrr::map(testtest,
function(x){
print("ok")
})
purrr::map(testtest,
function(x){
print("ok ok")
})
purrr::map(testtest,
function(x){
print(x)
})
purrr::map(testtest,
function(x){
})
purrr::map(testtest,
function(x){
x <- x+1
})
purrr::map(testtest,
function(x){
purrr::map(x, function(x){
print(x)
}
})
purrr::map(testtest,
function(x){
purrr::map(x, function(x){
print(x)
})
})
ex <- data.frame()
ex <- data.frame()
i <- 1
j <- 0
purrr::map(testtest,
j <- j+1
i <- 1
function(x,ex){
purrr::map(x, function(x, ex){
ex[[i]][[j]] <- x
i <- i+1
}, ex)
},ex)
ex <- data.frame()
i <- 1
j <- 0
purrr::map(testtest,
function(x,ex){
j <- j+1
i <- 1
purrr::map(x, function(x, ex){
ex[[i]][[j]] <- x
i <- i+1
}, ex)
},ex)
?data.frame
ex <- data.frame(c(0,0),c(0,0))
i <- 1
j <- 0
purrr::map(testtest,
function(x,ex){
j <- j+1
i <- 1
purrr::map(x, function(x, ex){
ex[[i]][[j]] <- x
i <- i+1
}, ex)
},ex)
ex <- data.frame(c(0,0),c(0,0))
i <- 1
j <- 0
ex <- purrr::map(testtest,
function(x,ex){
j <- j+1
i <- 1
purrr::map(x, function(x, ex){
ex[[i]][[j]] <- x
i <- i+1
}, ex)
},ex)
ex <- data.frame(c(0,0),c(0,0))
i <- 1
j <- 0
ex <- purrr::map(testtest,
function(x,ex){
j <- j+1
i <- 1
purrr::map(x, function(x, ex){
ex[[i]][[j]] <- x
i <- i+1
}, ex)
},ex)
ex <- data.frame(c(0,0),c(0,0))
i <- 1
j <- 0
ex <- purrr::map(testtest,
function(x,ex){
purrr::map(x, function(x, ex){
}, ex)
},ex)
ex <- data.frame(c(0,0),c(0,0))
i <- 1
j <- 0
ex <- purrr::map(testtest,
function(x,ex){
purrr::map(x, function(x, ex){
x
}, ex)
},ex)
ex
testtest
ex <- data.frame(c(0,0),c(0,0))
i <- 1
j <- 0
ex <- purrr::map(testtest,
function(x,ex){
x
},ex)
ex
ex <- data.frame(c(0,0),c(0,0))
ex
ex <- data.frame(c(0,0),c(0,0))
i <- 1
j <- 0
for (i in length(testtest)){
for (j in ncol(testest)){
ex[[i]][[j]] <- testtest[[i]][[j]]
}
}
ex <- data.frame(c(0,0),c(0,0))
i <- 1
j <- 0
for (i in length(testtest)){
for (j in ncol(testtest)){
ex[[i]][[j]] <- testtest[[i]][[j]]
}
}
ex
testtest
testtest[[1]][[2]]
testtest[[1]][[1]]
ex <- data.frame(c(0,0),c(0,0))
i <- 1
j <- 1
for (i in length(testtest)){
for (j in ncol(testtest)){
ex[[i]][[j]] <- testtest[[i]][[j]]
}
}
ex <- data.frame(c(0,0),c(0,0))
for (i in 1:length(testtest)){
for (j in 1:ncol(testtest)){
ex[[i]][[j]] <- testtest[[i]][[j]]
}
}
ex
ex[[1]]
row(ex)
row(ex,1)
setwd("./Polytech-IG4/InternshipHanoi/rRice/")
dir()
devtools::check(".")
