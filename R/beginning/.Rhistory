#name of the class
"Property",
#attributes of the class
slots = list(description = "character")
)
setClass(
#name of the class
"Gene",
#attributes of the class
slots = list(start = "numeric", end = "numeric", name = "character", strand = "factor", properties = "vector")
)
setClass(
#name of the class
"Chromosome",
#attributes of the class
slots = list(name = "character")
)
setClass(
#name of the class
"Locus",
#attributes of the class
slots = list(start = "numeric", end = "numeric", genes = "vector", chromosome = "numeric")
)
setClass(
#name of the class
"Experiment",
#attributes of the class
slots = list(name = "character", date = "character", locus = "Locus")
)
setMethod("show",
"Locus",
function(object){
cat ("*** Class Locus , start is " , object@start, " end is", object@end , " and it's chromosome is ", object@chromosome)
})
setGeneric(name = "ExistLocus",
def = function(start,list_locus){standardGeneric("ExistLocus" )}
)
setMethod(f="ExistLocus",
signature = "character",
definition = function(start,list_locus){
result <- FALSE
for (i in 1:length(list_locus)){
if(list_locus[i] == start){
result <- TRUE
}
}
return(typeof(result))
}
)
test <- read.table("./test/text.txt")
datas <- vector(mode='list', length=57)
test[[1]][[1]]
for ( i in 1:nrow(test) ) {
datas[i] <- new ("Locus", start =test[[2]][[i]], end=test[[3]][[i]], chromosome=test[[1]][[i]])
}
showMethods(class="Locus")
ExistLocus(6612124,datas)
setMethod(f="ExistLocus",
signature = "numeric list",
definition = function(start,list_locus){
result <- FALSE
for (i in 1:length(list_locus)){
if(list_locus[i] == start){
result <- TRUE
}
}
return(typeof(result))
}
)
#the class for the experiments
setClass(
#name of the class
"Experiment",
#attributes of the class
slots = list(name = "character", date = "character", locus = "Locus")
)
#-----------------------------------
#Methods
setMethod("show",
"Locus",
function(object){
cat ("*** Class Locus , start is " , object@start, " end is", object@end , " and it's chromosome is ", object@chromosome)
})
setGeneric(name = "ExistLocus",
def = function(start,list_locus){standardGeneric("ExistLocus" )}
)
ExistLocus(6612124,datas)
setMethod(f="ExistLocus",
signature = "...",
definition = function(start,list_locus){
result <- FALSE
for (i in 1:length(list_locus)){
if(list_locus[i] == start){
result <- TRUE
}
}
return(typeof(result))
}
)
setMethod(f="ExistLocus",
signature = "Locus",
definition = function(start,list_locus){
result <- FALSE
for (i in 1:length(list_locus)){
if(list_locus[i] == start){
result <- TRUE
}
}
return(typeof(result))
}
)
ExistLocus(6612124,datas)
setMethod(f="ExistLocus",
signature = "numeric",
definition = function(start,list_locus){
result <- FALSE
for (i in 1:length(list_locus)){
if(list_locus[i] == start){
result <- TRUE
}
}
return(typeof(result))
}
)
ExistLocus(6612124,datas)
typeof(length(datas))
typeof(datas[[1]]@start)
setMethod(f="ExistLocus",
signature = "integer",
definition = function(start,list_locus){
result <- FALSE
for (i in 1:length(list_locus)){
if(list_locus[i] == start){
result <- TRUE
}
}
return(result)
}
)
ExistLocus(6612124,datas)
ExistLocus(as.numeric(6612124),datas)
ExistLocus(6612124,as.numeric(unlist(datas)))
ExistLocus(6612124,lapply(datas, as.numeric)
)
setMethod(f="ExistLocus",
signature = "logical",
definition = function(start){
result <- FALSE
for (i in 1:length(datas)){
if(datas[i] == start){
result <- TRUE
}
}
return(result)
}
)
ExistLocus(6612124)
setGeneric(name = "ExistLocus",
def = function(start){standardGeneric("ExistLocus" )}
)
setMethod(f="ExistLocus",
signature = "logical",
definition = function(start){
result <- FALSE
for (i in 1:length(datas)){
if(datas[i] == start){
result <- TRUE
}
}
return(result)
}
)
ExistLocus(6612124)
?affinity
??affinity
setGeneric(name = "ExistLocusOrNot",
def = function(start){standardGeneric("ExistLocus" )}
)
setGeneric(name = "ExistLocusOrNot",
def = function(start){standardGeneric("ExistLocusOrNot" )}
)
setMethod(f="ExistLocusOrNot",
signature = "logical",
definition = function(start){
result <- FALSE
for (i in 1:length(datas)){
if(datas[[i]]@start == start){
result <- TRUE
}
}
return(result)
}
)
ExistLocusOrNot(6612124)
setMethod(f="ExistLocusOrNot",
signature = "numeric",
definition = function(start){
result <- FALSE
for (i in 1:length(datas)){
if(datas[[i]]@start == start){
result <- TRUE
}
}
return(result)
}
)
ExistLocusOrNot(6612124)
ExistLocusOrNot(6612125)
ExistLocusOrNot(123123)
ExistLocusOrNot(123124)
ExistLocusOrNot(123124)
read.csv(./test/outputRAPDB.csv)
read.csv("./test/outputRAPDB.csv")
setClass(
#name of the class
"Gene2",
#attributes of the class
slots = list(uniquename = "character", fgeneshName = "character", rappredname = "character", fmin = "numeric", fmax = "numeric",contig = "character",iricname = "character", strand = "factor", description = "character")
)
setClass(
#name of the class
"Gene2",
#attributes of the class
slots = list(uniquename = "character", msU7name = "character", fgeneshName = "character", rappredname = "character", fmin = "numeric", fmax = "numeric",contig = "character",iricname = "character", strand = "factor", description = "character")
)
ExistLocusOrNot(154689)
csv <- read.csv("./test/outputRAPDB.csv")
nrow(csv)
genes <- vector(mode='list', length=nrow(csv))
col(csv)
colnames(csv)
csv[[1]]
csv[[1]][[1]]
csv[1][1]
max.print = 100000
csv[1][1]
csv[[1]][[2]]
setClass(
#name of the class
"Gene2",
#attributes of the class
slots = list(uniquename = "character", msU7name = "character", fgeneshName = "character", rappredname = "character", fmin = "numeric", fmax = "numeric",contig = "character",iricname = "character", strand = "factor", description = "character")
)
colnames(csv)
genes <- vector(mode='list', length=nrow(csv))
for ( i in 1:nrow(csv) ) {
genes[i] <- new ("Genes", uniquename = csv[[1]][[i]], msU7name = csv[[9]][[i]], fgeneshName = csv[[4]][[i]], rappredname = csv[[5]][[i]], fmin = csv[[6]][[i]], fmax = csv[[2]][[i]],contig = csv[[7]][[i]],iricname = csv[[8]][[i]], strand = factor(csv[[10]][[i]]), description = csv[[11]][[i]])
}
for ( i in 1:nrow(csv) ) {
genes[i] <- new ("Gene", uniquename = csv[[1]][[i]], msU7name = csv[[9]][[i]], fgeneshName = csv[[4]][[i]], rappredname = csv[[5]][[i]], fmin = csv[[6]][[i]], fmax = csv[[2]][[i]],contig = csv[[7]][[i]],iricname = csv[[8]][[i]], strand = factor(csv[[10]][[i]]), description = csv[[11]][[i]])
}
setClass(
#name of the class
"Gene",
#attributes of the class
slots = list(start = "numeric", end = "numeric", name = "character", strand = "factor", properties = "vector")
)
for ( i in 1:nrow(csv) ) {
genes[i] <- new ("Gene2", uniquename = csv[[1]][[i]], msU7name = csv[[9]][[i]], fgeneshName = csv[[4]][[i]], rappredname = csv[[5]][[i]], fmin = csv[[6]][[i]], fmax = csv[[2]][[i]],contig = csv[[7]][[i]],iricname = csv[[8]][[i]], strand = factor(csv[[10]][[i]]), description = csv[[11]][[i]])
}
setClass(
#name of the class
"Gene2",
#attributes of the class
slots = list(uniquename = "factor", msU7name = "factor", fgeneshName = "factor", rappredname = "factor", fmin = "numeric", fmax = "numeric",contig = "factor",iricname = "factor", strand = "factor", description = "character")
)
for ( i in 1:nrow(csv) ) {
genes[i] <- new ("Gene2", uniquename = factor(csv[[1]][[i]]), msU7name = factor(csv[[9]][[i]]), fgeneshName = factor(csv[[4]][[i]]), rappredname = factor(csv[[5]][[i]]), fmin = csv[[6]][[i]], fmax = csv[[2]][[i]],contig = factor(csv[[7]][[i]]),iricname = factor(csv[[8]][[i]]), strand = factor(csv[[10]][[i]]), description = as.character(csv[[11]][[i]]))
}
genes[1]
setGeneric(name = "importDatas",
def = function(database){standardGeneric("importDatas" )}
)
setMethod(f="importDatas",
signature = "numeric",
definition = function(database){
csv <- read.csv("./test/outputRAPDB.txt")
genes <- vector(mode='list', length=nrow(csv))
for ( i in 1:nrow(csv) ) {
genes[i] <- new ("Gene2", uniquename = factor(csv[[1]][[i]]), msU7name = factor(csv[[9]][[i]]), fgeneshName = factor(csv[[4]][[i]]), rappredname = factor(csv[[5]][[i]]), fmin = csv[[6]][[i]], fmax = csv[[2]][[i]],contig = factor(csv[[7]][[i]]),iricname = factor(csv[[8]][[i]]), strand = factor(csv[[10]][[i]]), description = as.character(csv[[11]][[i]]))
}
return(genes)
}
)
result <- importDatas(1)
install.packages(rPython)
install.packages("rPython")
install.packages("rPython")
setRepositories()
install.packages("./rPython")
install.packages("rPython")
library(installr)
updateR()
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
install.packages(./rPython)
install.packages("./rPython")
install.packages("./rPython/")
install.packages("https://github.com/cjgb/rPython-win")
source("https://github.com/cjgb/rPython-win")
install.packages(
"https://github.com/cjgb/rPython-win",
repos = NULL, type = "source"
)
setRepositories()
setRepositories()
setMethod(f="importDatas",
signature = "numeric",
definition = function(database){
csv <- read.csv("./test/outputRAPDB.txt")
genes <- vector(mode='list', length=nrow(csv))
for ( i in 1:nrow(csv) ) {
genes[i] <- new ("Gene2", uniquename = factor(csv[[1]][[i]]), msU7name = factor(csv[[9]][[i]]), fgeneshName = factor(csv[[4]][[i]]), rappredname = factor(csv[[5]][[i]]), fmin = csv[[6]][[i]], fmax = csv[[2]][[i]],contig = factor(csv[[7]][[i]]),iricname = factor(csv[[8]][[i]]), strand = factor(csv[[10]][[i]]), description = as.character(csv[[11]][[i]]))
}
return(genes)
}
)
setGeneric(name = "importDatas",
def = function(database){standardGeneric("importDatas" )}
)
setMethod(f="importDatas",
signature = "numeric",
definition = function(database){
csv <- read.csv("./test/outputRAPDB.txt")
genes <- vector(mode='list', length=nrow(csv))
for ( i in 1:nrow(csv) ) {
genes[i] <- new ("Gene2", uniquename = factor(csv[[1]][[i]]), msU7name = factor(csv[[9]][[i]]), fgeneshName = factor(csv[[4]][[i]]), rappredname = factor(csv[[5]][[i]]), fmin = csv[[6]][[i]], fmax = csv[[2]][[i]],contig = factor(csv[[7]][[i]]),iricname = factor(csv[[8]][[i]]), strand = factor(csv[[10]][[i]]), description = as.character(csv[[11]][[i]]))
}
return(genes)
}
)
importDatas(1)
csv <- read.csv("./test/outputRAPDB.txt")
source('~/Polytech-IG4/InternshipHanoi/RRicePackage/R/RRicePackage.R')
importDatas(1)
csv <- read.csv("./test/outputRAPDB.txt")
setMethod(f="importDatas",
signature = "numeric",
definition = function(database){
csv <- read.csv("./test/outputRAPDB.csv")
genes <- vector(mode='list', length=nrow(csv))
for ( i in 1:nrow(csv) ) {
genes[i] <- new ("Gene2", uniquename = factor(csv[[1]][[i]]), msU7name = factor(csv[[9]][[i]]), fgeneshName = factor(csv[[4]][[i]]), rappredname = factor(csv[[5]][[i]]), fmin = csv[[6]][[i]], fmax = csv[[2]][[i]],contig = factor(csv[[7]][[i]]),iricname = factor(csv[[8]][[i]]), strand = factor(csv[[10]][[i]]), description = as.character(csv[[11]][[i]]))
}
return(genes)
}
)
importDatas(1)
setGeneric
setGeneric
setGeneric(name = "importGeneDatas",
def = function(database){standardGeneric("importGeneDatas" )}
)
setMethod("show",
"Locus",
function(object){
cat ("*** Class Locus , start is " , object@start, " end is", object@end , " and it's chromosome is ", object@chromosome)
}
)
setMethod(f="importGeneDatas",
signature = "numeric",
definition = function(database){
csv <- read.csv("./test/outputRAPDB.csv")
genes <- vector(mode='list', length=nrow(csv))
for ( i in 1:nrow(csv) ) {
genes[i] <- new ("Gene2", uniquename = factor(csv[[1]][[i]]), msU7name = factor(csv[[9]][[i]]), fgeneshName = factor(csv[[4]][[i]]), rappredname = factor(csv[[5]][[i]]), fmin = csv[[6]][[i]], fmax = csv[[2]][[i]],contig = factor(csv[[7]][[i]]),iricname = factor(csv[[8]][[i]]), strand = factor(csv[[10]][[i]]), description = as.character(csv[[11]][[i]]))
}
return(genes)
}
)
setMethod(f="importLocusDatas",
signature = "numeric",
definition = function(database){
table <- read.table("./test/text.txt")
datas <- vector(mode='list', length=57)
for ( i in 1:nrow(test) ) {
datas[i] <- new ("Locus", start = table[[2]][[i]], end = table[[3]][[i]], chromosome = table[[1]][[i]])
}
return(datas)
}
)
setGeneric(name = "importLocusDatas",
def = function(database){standardGeneric("importLocusDatas" )}
)
setMethod(f="importLocusDatas",
signature = "numeric",
definition = function(database){
table <- read.table("./test/text.txt")
datas <- vector(mode='list', length=57)
for ( i in 1:nrow(test) ) {
datas[i] <- new ("Locus", start = table[[2]][[i]], end = table[[3]][[i]], chromosome = table[[1]][[i]])
}
return(datas)
}
)
importLocusDatas(1)
source('~/Polytech-IG4/InternshipHanoi/RRicePackage/R/RRicePackage.R')
source('~/Polytech-IG4/InternshipHanoi/RRicePackage/R/RRicePackage.R')
#the class for the properties
setClass(
#name of the class
"Property",
#attributes of the class
slots = list(description = "character")
)
#the class for the genes
setClass(
#name of the class
"Gene",
#attributes of the class
slots = list(start = "numeric", end = "numeric", name = "character", strand = "factor", properties = "vector")
)
#the class for the genes
setClass(
#name of the class
"Gene2",
#attributes of the class
slots = list(uniquename = "factor", msU7name = "factor", fgeneshName = "factor", rappredname = "factor", fmin = "numeric", fmax = "numeric",contig = "factor",iricname = "factor", strand = "factor", description = "character")
)
#the class for the chromosomes
setClass(
#name of the class
"Chromosome",
#attributes of the class
slots = list(name = "character")
)
#the class for the locus
setClass(
#name of the class
"Locus",
#attributes of the class
slots = list(start = "numeric", end = "numeric", genes = "vector", chromosome = "numeric")
)
#the class for the experiments
setClass(
#name of the class
"Experiment",
#attributes of the class
slots = list(name = "character", date = "character", locus = "Locus")
)
#-----------------------------------
#Methods
#Generic Methods
setGeneric(name = "ExistLocusOrNot",
def = function(start){standardGeneric("ExistLocusOrNot" )}
)
setGeneric(name = "importGeneDatas",
def = function(database){standardGeneric("importGeneDatas" )}
)
setGeneric(name = "importLocusDatas",
def = function(database){standardGeneric("importLocusDatas" )}
)
#Methods
setMethod("show",
"Locus",
function(object){
cat ("*** Class Locus , start is " , object@start, " end is", object@end , " and it's chromosome is ", object@chromosome)
}
)
setMethod(f="importGeneDatas",
signature = "numeric",
definition = function(database){
csv <- read.csv("./test/outputRAPDB.csv")
genes <- vector(mode='list', length=nrow(csv))
for ( i in 1:nrow(csv) ) {
genes[i] <- new ("Gene2", uniquename = factor(csv[[1]][[i]]), msU7name = factor(csv[[9]][[i]]), fgeneshName = factor(csv[[4]][[i]]), rappredname = factor(csv[[5]][[i]]), fmin = csv[[6]][[i]], fmax = csv[[2]][[i]],contig = factor(csv[[7]][[i]]),iricname = factor(csv[[8]][[i]]), strand = factor(csv[[10]][[i]]), description = as.character(csv[[11]][[i]]))
}
return(genes)
}
)
setMethod(f="importLocusDatas",
signature = "numeric",
definition = function(database){
table <- read.table("./test/text.txt")
datas <- vector(mode='list', length=57)
for ( i in 1:nrow(test) ) {
datas[i] <- new ("Locus", start = table[[2]][[i]], end = table[[3]][[i]], chromosome = table[[1]][[i]])
}
return(datas)
}
)
setMethod(f="ExistLocusOrNot",
signature = "numeric",
definition = function(start){
result <- FALSE
for (i in 1:length(datas)){
if(datas[[i]]@start == start){
result <- TRUE
}
}
return(result)
}
)
rPython
?rPython
source('~/Polytech-IG4/InternshipHanoi/RRicePackage/R/RRicePackage.R')
library("../rPython")
library("./../rPython")
library("../../rPython")
library("./rPython")
library("rPython")
library(rPython)
package.skeleton("packClassic", + code_file="packClassic/R/progClassic.R", NAMESPACE= TRUE, force = TRUE )
package.skeleton("packClassic", code_file="packClassic/R/progClassic.R", NAMESPACE= TRUE, force = TRUE )
package.skeleton("packClassic", code_file="packClassic/R/progClassic.R", namespace= TRUE, force = TRUE )
package.skeleton(name = "RricePackage")
package.skeleton(name = "RricePackage",code_files="RRicePackage.R")
package.skeleton(name = "RricePackage2",code_files="RRicePackage.R")
package.skeleton(name = "RricePackage2",code_files="RRicePackage.R", force=TRUE)
package.skeleton(name = "RricePackage",code_files="RRicePackage.R", force=TRUE)
datas <- read.csv("./test/outputRAPDB.csv")
ExistLocusOrNot(1)
