for ( i in 1:nrow(test) ) {
datas[i] <- new ("Gene", name = "test", start =test[[2]][[i]], end=test[[3]][[i]])
}
datas[1]
datas
datas[i] <- new ("Locus", start =test[[2]][[i]], end=test[[3]][[i]])
for ( i in 1:nrow(test) ) {
datas[i] <- new ("Locus", start =test[[2]][[i]], end=test[[3]][[i]])
}
warnings()... =
for ( i in 1:nrow(test) ) {
warning( datas[i] <- new ("Locus", start =test[[2]][[i]], end=test[[3]][[i]]) )
}
for ( i in 1:nrow(test) ) {
datas[i] <- new ("Locus", start =test[[2]][[i]], end=test[[3]][[i]])
}
datas
read.csv("./test/outputRAPDB.csv")
source('~/Polytech-IG4/InternshipHanoi/RRicePackage/R/RRicePackage.R')
clearPushBack()
clear
clear()
clean
test2 <- read.csv("./test/outputRAPDB.csv")
length(test2)
nrow(test2)
test2[1]
print(test2[1],"max.print")
options(max.print=1000000)
test2[1]
datas
csv <- read.csv("./test/outputRAPDB")
csv <- read.csv("./test/outputRAPDB.csv")
csv
if(!require(devtools)){install.packages("devtools")}
if(!require(roxygen2)){devtools::install_github("klutometis/roxygen")}
setMethod(f="FindProperty",
signature = "Gene",
definition = function(obj_search,list_gene){
result <- "no such property in this group of genes"
for (i in 1:length(list_gene)){
if(list_gene[i] == obj_search){
result <- list_gene[i]@name
}
}
return(result)
})
setMethod(f="ExistLocus",
signature = "Locus",
definition = function(start,list_locus){
result <- 0
for (i in 1:length(list_locus)){
if(list_locus[i] == start){
result <- list_locus[i]@start
}
}
return(result)
}
)
table <- read.table("./test/text.txt")
datas <- vector(mode='list', length=57)
for ( i in 1:nrow(test) ) {
datas[i] <- new ("Locus", start =test[[2]][[i]], end=test[[3]][[i]])
}
datas
table <- read.table("./test/text.txt")
setClass(
#name of the class
"Property",
#attributes of the class
slots = list(description = "character")
)
setClass(
#name of the class
"Gene",
#attributes of the class
slots = list(start = "numeric", end = "numeric", name = "character", strand = "factor", properties = "vector")
)
setClass(
#name of the class
"Chromosome",
#attributes of the class
slots = list(name = "character")
)
setClass(
#name of the class
"Locus",
#attributes of the class
slots = list(start = "numeric", end = "numeric", genes = "vector", chromosome = "Chromosome")
)
setClass(
#name of the class
"Experiment",
#attributes of the class
slots = list(name = "character", date = "character", locus = "Locus")
)
table <- read.table("./test/text.txt")
datas <- vector(mode='list', length=57)
for ( i in 1:nrow(test) ) {
datas[i] <- new ("Locus", start =test[[2]][[i]], end=test[[3]][[i]])
}
datas
table
test <- read.table("./test/text.txt")
datas <- vector(mode='list', length=57)
for ( i in 1:nrow(test) ) {
datas[i] <- new ("Locus", start =test[[2]][[i]], end=test[[3]][[i]])
}
datas
source('~/Polytech-IG4/InternshipHanoi/RRicePackage/R/RRicePackage.R')
setClass(
#name of the class
"Property",
#attributes of the class
slots = list(description = "character")
)
setClass(
#name of the class
"Gene",
#attributes of the class
slots = list(start = "numeric", end = "numeric", name = "character", strand = "factor", properties = "vector")
)
setClass(
#name of the class
"Chromosome",
#attributes of the class
slots = list(name = "character")
)
setClass(
#name of the class
"Locus",
#attributes of the class
slots = list(start = "numeric", end = "numeric", genes = "vector", chromosome = "Chromosome")
)
setClass(
#name of the class
"Experiment",
#attributes of the class
slots = list(name = "character", date = "character", locus = "Locus")
)
setMethod(f="FindProperty",
signature = "Gene",
definition = function(obj_search,list_gene){
result <- "no such property in this group of genes"
for (i in 1:length(list_gene)){
if(list_gene[i] == obj_search){
result <- list_gene[i]@name
}
}
return(result)
})
setMethod(f="ExistLocus",
signature = "Locus",
definition = function(start,list_locus){
result <- 0
for (i in 1:length(list_locus)){
if(list_locus[i] == start){
result <- list_locus[i]@start
}
}
return(result)
}
)
test <- read.table("./test/text.txt")
datas <- vector(mode='list', length=57)
for ( i in 1:nrow(test) ) {
datas[i] <- new ("Locus", start =test[[2]][[i]], end=test[[3]][[i]])
}
datas
datas[1]
datas[1]@start
datas[[1]]@start
setMethod(f="ExistLocus",
signature = "Locus",
definition = function(start,list_locus){
result <- 0
for (i in 1:length(list_locus)){
if(list_locus[i] == start){
result <- list_locus[[i]]@start
}
}
return(result)
}
)
ExistLocus(6612124,datas)
setMethod(f="ExistLocus",
signature = "Locus",
definition = function(start,list_locus){
result <- 0
for (i in 1:length(list_locus)){
if(list_locus[i] == start){
result <- list_locus[[i]]@start
}
}
return(result)
}
)
source("http://bioconductor.org/biocLite.R")
setMethod(f="ExistLocus",
signature = "Locus",
definition = function(start,list_locus){
result <- 0
for (i in 1:length(list_locus)){
if(list_locus[i] == start){
result <- list_locus[[i]]@start
}
}
return(result)
}
)
"ExistLocus"
ExistLocus(6612124,datas)
showMethods(class="Locus")
setMethod("show",
"Locus",
function(object){
cat ("*** Class Locus , method Show ***\ n" )
})
show()
show(Locus)
datas[1]
setMethod("ExistLocus",
"Locus",
function(start,list_locus){
result <- 0
for (i in 1:length(list_locus)){
if(list_locus[i] == start){
result <- list_locus[[i]]@start
}
}
return(result)
}
)
setMethod("show",
"Locus",
function(object){
cat ("*** Class Locus , start is " , object@start, " end is", object@end , " and it's chromosome is ", object@chromosome)
})
datas[1]
for ( i in 1:nrow(test) ) {
datas[i] <- new ("Locus", start =test[[2]][[i]], end=test[[3]][[i]], chromosome=test[[1]][[i]])
}
setClass(
#name of the class
"Locus",
#attributes of the class
slots = list(start = "numeric", end = "numeric", genes = "vector", chromosome = "character")
)
for ( i in 1:nrow(test) ) {
datas[i] <- new ("Locus", start =test[[2]][[i]], end=test[[3]][[i]], chromosome=test[[1]][[i]])
}
for ( i in 1:nrow(test) ) {
datas[i] <- new ("Locus", start =test[[2]][[i]], end=test[[3]][[i]], chromosome=cat("chr0",test[[1]][[i]]))
}
test[[1]][[1]]
setClass(
#name of the class
"Locus",
#attributes of the class
slots = list(start = "numeric", end = "numeric", genes = "vector", chromosome = "character")
)
for ( i in 1:nrow(test) ) {
datas[i] <- new ("Locus", start =test[[2]][[i]], end=test[[3]][[i]], chromosome=cat("chr0",test[[1]][[i]]))
}
setClass(
#name of the class
"Locus",
#attributes of the class
slots = list(start = "numeric", end = "numeric", genes = "vector", chromosome = "numeric")
)
for ( i in 1:nrow(test) ) {
datas[i] <- new ("Locus", start =test[[2]][[i]], end=test[[3]][[i]], chromosome=test[[1]][[i]])
}
datas[1]
setGeneric(name = "ExistLocus",
def = function(start,list_locus){standardGeneric(" ExistLocus " )}
)
setGeneric(name = "ExistLocus",
def = function(start,list_locus){standardGeneric("ExistLocus" )}
)
setMethod(f="ExistLocus",
signature = "Locus",
definition = function(start,list_locus){
result <- 0
for (i in 1:length(list_locus)){
if(list_locus[i] == start){
result <- list_locus[[i]]@start
}
}
return(result)
}
)
ExistLocus(6612124,datas)
showMethods(class="Locus")
setMethod(f="ExistLocus",
signature = "numeric",
definition = function(start,list_locus){
result <- 0
for (i in 1:length(list_locus)){
if(list_locus[i] == start){
result <- list_locus[[i]]@start
}
}
return(result)
}
)
ExistLocus(6612124,datas)
setMethod(f="ExistLocus",
signature = "double",
definition = function(start,list_locus){
result <- 0
for (i in 1:length(list_locus)){
if(list_locus[i] == start){
result <- list_locus[[i]]@start
}
}
return(result)
}
)
setMethod(f="ExistLocus",
signature = "double",
definition = function(start,list_locus){
result <- 0
for (i in 1:length(list_locus)){
if(list_locus[i] == start){
result <- list_locus[[i]]@start
}
}
return(result)
}
)
setMethod(f="ExistLocus",
signature = "numeric",
definition = function(start,list_locus){
result <- 0
for (i in 1:length(list_locus)){
if(list_locus[i] == start){
result <- list_locus[[i]]@start
}
}
return(result)
}
)
ExistLocus(6612124,datas)
length(datas)
setMethod(f="ExistLocus",
signature = "numeric",
definition = function(start,list_locus){
result <- 0
for (i in 1:length(asnumeric(list_locus)){
if(list_locus[i] == start){
result <- list_locus[[i]]@start
}
}
return(result)
}
)
#-----------------------------------
#test recovery datas from .txt in vector
test <- read.table("./test/text.txt")
datas <- vector(mode='list', length=57)
test[[1]][[1]]
for ( i in 1:nrow(test) ) {
datas[i] <- new ("Locus", start =test[[2]][[i]], end=test[[3]][[i]], chromosome=test[[1]][[i]])
}
datas
datas[[1]]@start
"ExistLocus"
ExistLocus(6612124,datas)
showMethods(class="Locus")
setMethod(f="ExistLocus",
signature = "numeric",
definition = function(start,list_locus){
result <- 0
for (i in 1:length(asnumeric(list_locus))){
if(list_locus[i] == start){
result <- list_locus[[i]]@start
}
}
return(result)
}
)
ExistLocus(6612124,datas)
setMethod(f="ExistLocus",
signature = "numeric",
definition = function(start,list_locus){
result <- 0
for (i in 1:length(asNumeric(list_locus))){
if(list_locus[i] == start){
result <- list_locus[[i]]@start
}
}
return(result)
}
)
ExistLocus(6612124,datas)
setMethod(f="ExistLocus",
signature = "numeric",
definition = function(start,list_locus){
result <- 0
for (i in 1:length(list_locus)){
if(list_locus[i] == start){
result <- list_locus[[i]]@start
}
}
return(result)
}
)
ExistLocus(6612124,datas)
setMethod(f="ExistLocus",
signature = "numeric",
definition = function(start,list_locus){
result <- 0
for (i in 1:length(list_locus)){
if(list_locus[i] == start){
result <- as.numeric(list_locus[[i]]@start)
}
}
return(result)
}
)
ExistLocus(6612124,datas)
setGeneric(name = "ExistLocus",
def = function(start,list_locus){standardGeneric("ExistLocus" )}
)
setMethod(f="ExistLocus",
signature = "double",
definition = function(start,list_locus){
result <- 0
for (i in 1:length(list_locus)){
if(list_locus[i] == start){
result <- list_locus[[i]]@start
}
}
return(result)
}
)
setMethod(f="ExistLocus",
setMethod(f="ExistLocus",
signature = "numeric",
definition = function(start,list_locus){
result <- 0
for (i in 1:length(list_locus)){
if(list_locus[i] == start){
result <- list_locus[[i]]@start
}
}
return(result)
}
)
setMethod(f="ExistLocus",
signature = "boolean",
definition = function(start,list_locus){
result <- FALSE
for (i in 1:length(list_locus)){
if(list_locus[i] == start){
result <- TRUE
}
}
return(result)
}
)
setMethod(f="ExistLocus",
signature = "bool",
definition = function(start,list_locus){
result <- FALSE
for (i in 1:length(list_locus)){
if(list_locus[i] == start){
result <- TRUE
}
}
return(result)
}
)
setMethod(f="ExistLocus",
signature = "boolean",
definition = function(start,list_locus){
result <- FALSE
for (i in 1:length(list_locus)){
if(list_locus[i] == start){
result <- TRUE
}
}
return(result)
}
)
setMethod(f="ExistLocus",
signature = "Boolean",
definition = function(start,list_locus){
result <- FALSE
for (i in 1:length(list_locus)){
if(list_locus[i] == start){
result <- TRUE
}
}
return(result)
}
)
setMethod(f="ExistLocus",
signature = "logical",
definition = function(start,list_locus){
result <- FALSE
for (i in 1:length(list_locus)){
if(list_locus[i] == start){
result <- TRUE
}
}
return(result)
}
)
ExistLocus(6612124,datas)
ExistLocus(6612124,datas)
